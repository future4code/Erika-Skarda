{"version":3,"sources":["Components/CreatePlaylist.js","Components/UserPlaylist.js","App.js","serviceWorker.js","index.js"],"names":["CreatePlaylist","props","onchangePlaylist","event","setState","inputPlaylist","target","value","createPlaylists","body","name","state","axios","post","headers","auth","then","response","console","log","catch","Formulario","for","Input","type","onChange","this","BotaoSalvar","onClick","createPlaylist","React","Component","styled","div","input","button","UserPlaylist","searchPlaylist","get","resposta","list","data","result","listaPlaylists","error","errorMessage","deletePlaylist","id","window","confirm","delete","alert","listaPlaylist","undefined","Lista","map","playlist","LiPlaylist","BotaoDelete","li","App","changeComponent","changePage","nextPage","change","focus","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ac2fa8cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst baseUrl = \"https://us-central1-future-apis.cloudfunctions.net/spotifour\"\r\nclass CreatePlaylist extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n\r\n        // newPlaylist: [],\r\n        inputPlaylist: \"\"\r\n  \r\n      }\r\n    }\r\n    onchangePlaylist = (event) => {\r\n\r\n        this.setState({inputPlaylist:event.target.value})\r\n        \r\n    }\r\n  \r\n    createPlaylists = () => {\r\n        const body = {\r\n            name: this.state.inputPlaylist\r\n        };\r\n        axios\r\n            .post(`${baseUrl}/playlists`,\r\n            body,\r\n            {\r\n                headers: {\r\n                  auth: \"Erika-Hamilton\"\r\n                }\r\n              }\r\n            )\r\n            .then((response) => {\r\n                console.log(\"Playlist Criada\")\r\n                // this.searchPlaylist();\r\n            })\r\n            .catch(() => {\r\n                console.log(\"Erro\")\r\n            })\r\n    }\r\n    \r\n \r\n    render() {\r\n        return (\r\n            <Formulario>\r\n                <div>\r\n                    <label for = \"nome\">Playlist: </label>\r\n                    <Input\r\n                        type = \"text\"\r\n                        name = \"nome\"\r\n                        onChange = { this.onchangePlaylist}\r\n                        value = { this.state.inputPlaylist }\r\n                    />\r\n                </div>\r\n            <BotaoSalvar onClick={this.createPlaylist}>Salvar</BotaoSalvar>\r\n            \r\n          </Formulario>\r\n        \r\n        )\r\n    }   \r\n}\r\nconst Formulario = styled.div`\r\n    display: flex;\r\n    flex-direction: column;    \r\n    width: 33vw;\r\n    margin:100px;\r\n    border: 1px double black;\r\n    padding: 30px;\r\n`\r\nconst Input = styled.input ` \r\n    border-radius: 5px;\r\n    border: 1px solid black;\r\n    margin: 10px;\r\n    padding: 5px 2px;\r\n`\r\nconst BotaoSalvar = styled.button`\r\nwidth: 30%;\r\n  z-index: 1;\r\n  position: relative;\r\n  font-size: inherit;\r\n  font-family: inherit;\r\n  color: white;\r\n  padding: 0.5em 1em;\r\n  outline: none;\r\n  border: none;\r\n  background-color: hsl(236, 32%, 26%);\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n\r\n  ::after {\r\n    content: \"\";\r\n    z-index: -1;\r\n    background-color: hsla(0, 0%, 100%, 0.2);\r\n    position: absolute;\r\n    top: -50%;\r\n    bottom: -50%;\r\n    width: 1.25em;\r\n    transform: translate3d(-525%, 0, 0) rotate(35deg);\r\n  }\r\n\r\n  :hover::after {\r\n    transition: transform 0.45s ease-in-out;\r\n    transform: translate3d(200%, 0, 0) rotate(35deg);\r\n  }\r\n`;\r\n  export default CreatePlaylist","import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst baseUrl = \"https://us-central1-future-apis.cloudfunctions.net/spotifour\"\r\nclass UserPlaylist extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        listaPlaylist: [],\r\n        errorMessage: undefined\r\n    \r\n      }\r\n    }\r\n    //Executado depois que o componente foi montado na DOM,\r\n    //Acessado uma vez em um ciclo de vida. AS chamadas de API\r\n    // devem ser feitas sempre com componentDidMount\r\n    componentDidMount () {\r\n      this.searchPlaylist()\r\n    }\r\n\r\n    // searchPlaylist = async () => {\r\n        \r\n    //     const response = await axios.get(`${baseUrl}/playlists`, {\r\n    //         headers: {\r\n\r\n    //           \"api-token\": \"Erika-Hamilton\"\r\n    //         }\r\n    //       })\r\n         \r\n    //         this.setState({ listaPlaylist: response.data.result.list })\r\n    \r\n    // }\r\n    searchPlaylist = () => {\r\n        axios\r\n          .get(\r\n            \"https://us-central1-future-apis.cloudfunctions.net/spotifour/playlists\",\r\n            {\r\n              headers: {\r\n                auth: \"Erika-Hamilton\"\r\n              }\r\n            }\r\n          )\r\n          .then((resposta) => {\r\n            const list = resposta.data.result.list;\r\n    \r\n            this.setState({ listaPlaylists: list });\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            this.setState({ errorMessage: \"Erro em acrescentar\" });\r\n          });\r\n      };\r\n    deletePlaylist = (id) => {\r\n            if (window.confirm('Tem certeza de que deseja deletar essa playlist?')) {\r\n            axios\r\n            \r\n            .delete (\r\n              `${baseUrl}/playlists/${id}`,\r\n              \r\n              {\r\n                headers: {\r\n      \r\n                  \"api-token\": \"Erika-Hamilton\"\r\n      \r\n                }\r\n              }\r\n              ).then(response => {\r\n                \r\n                window.alert(\"UsuÃ¡rio deletado!\")\r\n            })\r\n            .catch((error) => {\r\n                \r\n              this.setState({ errorMessage: \"Erro\" });\r\n            });\r\n\r\n          } else {\r\n            window.alert(\"Playlist Deletada\")\r\n          }\r\n        } \r\n        render() {\r\n         return (\r\n            <Lista> \r\n              <h2>Suas Playlist: </h2>\r\n                <ul>\r\n                    {this.state.listaPlaylist.map((playlist) => {\r\n                     return (\r\n                        <LiPlaylist>\r\n                         {/* <p onClick = {() => this.state.onClickPlaylist(playlist.id)}>{playlist.name}</p>  */}\r\n                             <span>{playlist.name}</span> \r\n                            <BotaoDelete onClick = {() => this.deletePlaylist(playlist.id) }> X </BotaoDelete>\r\n                        </LiPlaylist>\r\n                        )\r\n                      })}\r\n                </ul>\r\n            </Lista>\r\n            )\r\n  \r\n        }\r\n  }\r\n  const Lista = styled.div`\r\n  display:flex\r\n  flex-direction: column;\r\n  margin:100px;\r\n  padding: 30px;\r\n`\r\n const BotaoDelete = styled.button ` \r\n  color: red;\r\n  cursor:pointer\r\n  font-size: 20px;\r\n `\r\n\r\n const LiPlaylist = styled.li ` \r\n   width: 30%;\r\n   margin-bottom: 10px;\r\n   padding-bottom: 5px;\r\n  border-bottom: 1px solid black;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  color:black;\r\n`\r\nexport default UserPlaylist;","import React from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport CreatePlaylist from './Components/CreatePlaylist';\nimport UserPlaylist from './Components/UserPlaylist';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      changePage : 0\n    };\n  }\n\n  changeComponent = () => {\n    switch (this.state.changePage) {\n      case 0:\n        return <CreatePlaylist/>;\n      case 1:\n        return <UserPlaylist/>\n      default:\n        return <CreatePlaylist/>;\n    }\n  };\n  nextPage = () => {\n    this.setState({\n       changePage: this.state.changePage !=0 ? 0 : 1\n    });\n  };\n\n  \n  render () {\n\n    const change = this.changeComponent();\n    return (\n      <div>\n        <button\n          onClick ={event => {\n            event.target.focus()\n            this.nextPage() \n          }}\n          >{ this.state.changePage != 0 ? \"Playlists\" : \"Criar Playlist\" }\n          </button>\n          {change}\n      </div>\n    )\n  }\n};\n\n//     this.state = {\n//       selectPage: \"CreatePlaylist\"\n//     }\n//   }\n//     onclickSelect = () => {\n//       let page;\n\n//       switch(this.state.selectPage) {\n//         case \"CreatePlaylist\":\n//           page = \"UserPlaylist\";\n//           break;\n//         case \"UserPlaylist\":\n//           page =\"CreatePlaylist\"\n//           break;\n//         default:\n//           page = \"CreatePlaylist\"\n//       }\n//       this.setstate ({selectPage: page})\n//     };\n\n//     PageRendereizada = () => {\n//       switch(this.state.selectPage) {\n\n//         case \"CreatePlaylist\":\n//           return  <UserPlaylist/>;\n          \n//         case \"UserPlaylist\":\n//           return <CreatePlaylist/>\n        \n//       }\n//     };\n\n//  render() {\n//    const currentPage = this.PageRendereizada();\n//     return (\n//     <Container>\n//       <button onClick = {this.onclickSelect}>\n//         {this.state.selectPage === \"CreatePlaylist\" ? \"Ir para Lista\": \"Voltar\"}\n//       </button>\n//       {currentPage}\n   \n//     </Container>\n//     )\n//   }\n// };\n\nconst Container = styled.div`\n  display: grid;\n  justify-items: center;\n  gap: 20px;\n`;\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}