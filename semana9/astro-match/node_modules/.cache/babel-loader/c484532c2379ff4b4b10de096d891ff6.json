{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Mateus\\\\Desktop\\\\Future4\\\\Erika-Skarda\\\\semana9\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Mateus\\\\Desktop\\\\Future4\\\\Erika-Skarda\\\\semana9\\\\astro-match\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios'; // Função síncrona --> todos profiles array de perfis\n\nexport var setProfile = function setProfile(profile) {\n  return {\n    type: 'SET_PROFILE',\n    payload: {\n      profile: profile\n    }\n  };\n}; // Função síncrona --> array dos matches no usuário\n\nexport var setMatchedProfile = function setMatchedProfile(matches) {\n  return {\n    type: \"SET_MATCHED_PROFILE\",\n    payload: {\n      matches: matches\n    }\n  };\n}; // Função assíncrona\n\nvar baseURL = \"https://us-central1-missao-newton.cloudfunctions.net/astroMatch\"; // GET Get Profile To Choose - Retorna um perfil que ainda não foi visto por você.\n// Essa aqui é a getProfileToSwipe \n\nexport var getProfile = function getProfile() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"\".concat(baseURL, \"/erika/person\"));\n\n              case 2:\n                response = _context.sent;\n                dispatch(setProfile(response.data.profile));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}; //POST Choose Person - Recebe um id e uma escolha (choice). \n//A escolha é a opção do usuário no momento do swipe. Deve ser true ou false.\n\nexport var chooseProfile = function chooseProfile(id, choice) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var body, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                body = {\n                  choice: choice,\n                  id: id\n                };\n                _context2.next = 3;\n                return axios.post(\"\".concat(baseURL, \"/erika/choose-person\"), body);\n\n              case 3:\n                response = _context2.sent;\n                dispatch(getProfile(response.data.profile));\n                console.log(response.data.profile);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; //GET Get Matches - Retorna um array de perfis que deram match com você.\n\nexport var getMatches = function getMatches() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"\".concat(baseURL, \"/erika/matches\"));\n\n              case 2:\n                response = _context3.sent;\n                dispatch(setMatchedProfile(response.data.matches));\n                console.log(response.data.matches);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //PUT Clear - Limpa todos os matches e perfis vistos.\n\nexport var clearSwipes = function clearSwipes() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.put(\"\".concat(baseURL, \"/erika/clear\"));\n\n              case 2:\n                response = _context4.sent;\n                dispatch(getMatches(response.data.message));\n                console.log(response.data.message);\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["C:/Users/Mateus/desktop/Future4/Erika-Skarda/Semana9/astro-match/src/actions/profiles.js"],"names":["axios","setProfile","profile","type","payload","setMatchedProfile","matches","baseURL","getProfile","dispatch","get","response","data","chooseProfile","id","choice","body","post","console","log","getMatches","clearSwipes","put","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AACtC,SAAO;AACNC,IAAAA,IAAI,EAAE,aADA;AAENC,IAAAA,OAAO,EAAE;AAERF,MAAAA,OAAO,EAACA;AAFA;AAFH,GAAP;AAOA,CARM,C,CASP;;AACA,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAa;AAC7C,SAAO;AACNH,IAAAA,IAAI,EAAC,qBADC;AAENC,IAAAA,OAAO,EAAE;AACRE,MAAAA,OAAO,EAACA;AADA;AAFH,GAAP;AAMA,CAPM,C,CAUP;;AACA,IAAMC,OAAO,GAAG,iEAAhB,C,CAGA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE9BT,KAAK,CAACU,GAAN,WAAaH,OAAb,mBAF8B;;AAAA;AACzBI,gBAAAA,QADyB;AAG/BF,gBAAAA,QAAQ,CAACR,UAAU,CAACU,QAAQ,CAACC,IAAT,CAAcV,OAAf,CAAX,CAAR;;AAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAOP;AACA;;AACA,OAAO,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,MAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAgB,kBAAON,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtCO,gBAAAA,IADsC,GAC/B;AAEZD,kBAAAA,MAAM,EAAEA,MAFI;AAGZD,kBAAAA,EAAE,EAAEA;AAHQ,iBAD+B;AAAA;AAAA,uBAO3Cd,KAAK,CAACiB,IAAN,WAAcV,OAAd,2BAA6CS,IAA7C,CAP2C;;AAAA;AAMtCL,gBAAAA,QANsC;AAS5CF,gBAAAA,QAAQ,CAACD,UAAU,CAACG,QAAQ,CAACC,IAAT,CAAcV,OAAf,CAAX,CAAR;AACAgB,gBAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACC,IAAT,CAAcV,OAA1B;;AAV4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,C,CAaP;;AACA,OAAO,IAAMkB,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAOX,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE9BT,KAAK,CAACU,GAAN,WAAaH,OAAb,oBAF8B;;AAAA;AACzBI,gBAAAA,QADyB;AAG/BF,gBAAAA,QAAQ,CAACJ,iBAAiB,CAACM,QAAQ,CAACC,IAAT,CAAcN,OAAf,CAAlB,CAAR;AACAY,gBAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACC,IAAT,CAAcN,OAA1B;;AAJ+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAOP;;AACA,OAAO,IAAMe,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAOZ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACTT,KAAK,CAACsB,GAAN,WAAaf,OAAb,kBADS;;AAAA;AAC1BI,gBAAAA,QAD0B;AAE/BF,gBAAAA,QAAQ,CAACW,UAAU,CAACT,QAAQ,CAACC,IAAT,CAAcW,OAAf,CAAX,CAAR;AACAL,gBAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACC,IAAT,CAAcW,OAA1B;;AAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import axios from 'axios'\n\n// Função síncrona --> todos profiles array de perfis\nexport const setProfile = (profile) => {\n\treturn {\n\t\ttype: 'SET_PROFILE',\n\t\tpayload: {\n\n\t\t\tprofile:profile\n\t\t}\n\t}\n}\n// Função síncrona --> array dos matches no usuário\nexport const setMatchedProfile = (matches) => {\n\treturn {\n\t\ttype:\"SET_MATCHED_PROFILE\",\n\t\tpayload: {\n\t\t\tmatches:matches\n\t\t}\n\t}\n}\n\n\n// Função assíncrona\nconst baseURL = \"https://us-central1-missao-newton.cloudfunctions.net/astroMatch\"\n\n\n// GET Get Profile To Choose - Retorna um perfil que ainda não foi visto por você.\n// Essa aqui é a getProfileToSwipe \nexport const getProfile = () => async (dispatch) => {\n\tconst response = await\n\t\taxios.get(`${baseURL}/erika/person`)\n\tdispatch(setProfile(response.data.profile))\n\n}\n\n//POST Choose Person - Recebe um id e uma escolha (choice). \n//A escolha é a opção do usuário no momento do swipe. Deve ser true ou false.\nexport const chooseProfile = (id, choice) => async (dispatch) => {\n\tconst body = {\n\n\t\tchoice: choice,\n\t\tid: id\n\t}\n\tconst response = await\n\t\taxios.post(`${baseURL}/erika/choose-person`, body\n\t\t);\n\tdispatch(getProfile(response.data.profile))\n\tconsole.log(response.data.profile)\n}\n\n//GET Get Matches - Retorna um array de perfis que deram match com você.\nexport const getMatches = () => async (dispatch) => {\n\tconst response = await\n\t\taxios.get(`${baseURL}/erika/matches`)\n\tdispatch(setMatchedProfile(response.data.matches))\n\tconsole.log(response.data.matches)\n}\n\n//PUT Clear - Limpa todos os matches e perfis vistos.\nexport const clearSwipes = () => async (dispatch) => {\n\tconst response = await axios.put(`${baseURL}/erika/clear`)\n\t\tdispatch(getMatches(response.data.message))\n\t\tconsole.log(response.data.message)\n\t}\n\n"]},"metadata":{},"sourceType":"module"}